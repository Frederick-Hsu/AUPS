# FSW/FSV Spectrum Analyzer example
# Before you start this script, you must define the "SPECAN" Resource ID in Menu Settings -> Instruments
# with the fitting VISA connection. Don't forget to check the column "Enabled"
# For more details refer to 1MA196 Using R&SÂ®Forum Application for Instrument Remote Control

# The file VisaDeviceExtended.py must be in the same folder as this file
# It contains extension function for R&S Forum VisaDevice class and new instrument-related exceptions

import VisaDeviceExtended
reload (VisaDeviceExtended)

# try block to catch any InstrumentErrorException()
try:
    # -----------------------------------------------------------
    # Initialization: In R&S Forum opening a connection is performed automaticaly
    # -----------------------------------------------------------
    SPECAN.instrument.write_termination = ''
    # Some instruments require LF at the end of each command. In that case, use:
    # SPECAN.instrument.write_termination = '\n'
    SPECAN.ext_clear_status() # Clear instrument io buffers and status
    print SPECAN.query('*IDN?') # Query the Identification string
    SPECAN.write('*RST;*CLS') # Reset the instrument, clear the Error queue
    SPECAN.write('INIT:CONT OFF') # Switch OFF the continuous sweep
    SPECAN.write('SYST:DISP:UPD ON') # Display update ON - switch OFF after debugging
    SPECAN.ext_error_checking() # Error Checking after Initialization block
    
    # -----------------------------------------------------------
    # Basic Settings:
    # -----------------------------------------------------------
    SPECAN.write('DISP:WIND:TRAC:Y:RLEV 10.0') # Setting the Reference Level
    SPECAN.write('FREQ:CENT 3.0 GHz') # Setting the center frequency
    SPECAN.write('FREQ:SPAN 200 MHz') # Setting the span
    SPECAN.write('BAND 100 kHz') # Setting the RBW
    SPECAN.write('BAND:VID 300kHz') # Setting the VBW
    SPECAN.write('SWE:POIN 10001') # Setting the sweep points
    # -----------------------------------------------------------
    # SyncPoint 'SettingsApplied' - all the settings were applied
    # -----------------------------------------------------------
    SPECAN.instrument.timeout = 2.0 # Acquisition timeout in seconds - set it higher than the Sweep time
    SPECAN.write('INIT') # Start the sweep
    # -----------------------------------------------------------
    SPECAN.query('*OPC?') # Using *OPC? query waits until the instrument finished the Acquisition
    SPECAN.ext_error_checking() # Error Checking
    # -----------------------------------------------------------
    # SyncPoint 'AcquisitionFinished' - the results are ready
    # -----------------------------------------------------------
    # Fetching the trace in ASCII format
    # -----------------------------------------------------------
    print('Fetching trace in ASCII format... ')
    traceASC = SPECAN.instrument.query_ascii_values('FORM ASC;:TRAC? TRACE1')
    print 'ASCII data points read: {}'.format(len(traceASC))
    SPECAN.ext_error_checking() # Error Checking after the data transfer
    # -----------------------------------------------------------
    # Fetching the trace in Binary format
    # Transfer of traces in binary format is faster.
    # The traceBIN data and traceASC data are however the same.
    # -----------------------------------------------------------
    print('Fetching trace in binary format... ')
    traceBIN = SPECAN.instrument.query_binary_values('FORM REAL;:TRAC? TRACE1')
    print 'Binary data points read: {}'.format(len(traceBIN))
    SPECAN.ext_error_checking() # Error Checking after the data transfer
    # -----------------------------------------------------------
    # Setting the marker to max and querying the X and Y
    # -----------------------------------------------------------
    SPECAN.write('CALC1:MARK1:MAX') # Set the marker to the maximum point of the entire trace
    SPECAN.query('*OPC?') # Using *OPC? query waits until the marker is set
    markerX = float(SPECAN.query('CALC1:MARK1:X?'))
    markerY = float(SPECAN.query('CALC1:MARK1:Y?'))
    print('Marker Frequency %0.1f Hz, Level %0.2f dBm\n' % (markerX, markerY))
    SPECAN.ext_error_checking() # Error Checking after the markers reading
    # -----------------------------------------------------------
    # Making an instrument screenshot and transferring the file to the PC
    # -----------------------------------------------------------
    print('Taking instrument screenshot and saving it to the PC... ')
    SPECAN.write('HCOP:DEV:LANG PNG')
    SPECAN.write('MMEM:NAME \'c:\\temp\\Dev_Screenshot.png\'')
    SPECAN.write('HCOP:IMM') # Make the screenshot now
    SPECAN.query('*OPC?') # Wait for the screenshot to be saved
    SPECAN.ext_error_checking() # Error Checking after the screenshot creation
    SPECAN.ext_query_bin_data_to_file('MMEM:DATA? \'c:\\temp\\Dev_Screenshot.png\'', r'c:\Temp\PC_Screenshot.png')
    print('saved to PC c:\\Temp\\PC_Screenshot.png\n')
    SPECAN.ext_error_checking() # Error Checking after the screenshot save
    SPECAN.ext_copy_pc_file_to_instrument(r'c:\Temp\PC_Screenshot.png', r'c:\temp\Dev_ScreenshotCopy.png')
    SPECAN.ext_error_checking() # Error Checking after the transfer

except VisaDeviceExtended.InstrumentErrorException, e:
    # Catching instrument error exception and showing its content
    print 'Instrument error(s) occured:\n' + e.message
